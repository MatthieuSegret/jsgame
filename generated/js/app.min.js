(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

window.onload = function () {
  // Game
  var game = new Phaser.Game(640, 480, Phaser.AUTO, 'jsgame');
  game.transparent = true;
  game.state.add('play', require('./states/play'));
  game.state.add('gameover', require('./states/gameover'));
  game.state.add('win', require('./states/win'));
  game.state.add('preload', require('./states/preload'));
  game.state.start('preload');
};

},{"./states/gameover":7,"./states/play":8,"./states/preload":9,"./states/win":10}],2:[function(require,module,exports){
'use strict';

// Donne la capacité à un objet de toucher un autre
var Touchable = function() {}

Touchable.prototype.touch = function(target) {
  return this.game.physics.arcade.overlap(this, target);
};

module.exports = Touchable;

},{}],3:[function(require,module,exports){
'use strict';

var Touchable = require('./concerns/touchable');
var StaticObject = require('./staticObject');

// Player hérite de StaticObject
var Monster = function(game, x, y, image_name) {
  this.image_name = _.sample(['ghost1', 'ghost2', 'ghost3', 'dark_knight', 'hornet', 'undead', 'cactuar']);
  StaticObject.call(this, game, x, y, this.image_name);
}
Monster.prototype = Object.create(StaticObject.prototype);
Monster.prototype.constructor = StaticObject;

// Mixins
_.extend(Monster.prototype, Touchable.prototype);

Monster.prototype.follow = function(target) {
  var dirX = this.x < target.x ? -1 : 1;
  this.x -= dirX * 1;

  var dirY = this.y < target.y ? -1 : 1;
  this.y -= dirY * 1;
};

module.exports = Monster;

},{"./concerns/touchable":2,"./staticObject":6}],4:[function(require,module,exports){
'use strict';

var Touchable = require('./concerns/touchable');
var StaticObject = require('./staticObject');

// Player hérite de StaticObject
var Player = function(game, x, y, image_name) {
  this.image_name = image_name || 'player';
  StaticObject.call(this, game, x, y, this.image_name);
}
Player.prototype = Object.create(StaticObject.prototype);
Player.prototype.constructor = StaticObject;

// Mixins
_.extend(Player.prototype, Touchable.prototype);

Player.prototype.moveUp = function() {
  this.y -= 3;
};

Player.prototype.moveDown = function() {
  this.y += 3;
};

Player.prototype.moveLeft = function() {
  this.x -= 3;
};

Player.prototype.moveRight = function() {
  this.x += 3;
};

module.exports = Player;

},{"./concerns/touchable":2,"./staticObject":6}],5:[function(require,module,exports){
'use strict';

var StaticObject = require('./staticObject');

// Ruby hérite de StaticObject
var Ruby = function(game, x, y, image_name) {
  this.image_name = image_name || 'ruby';
  StaticObject.call(this, game, x, y, this.image_name);
}

Ruby.prototype.constructor = StaticObject;
Ruby.prototype = Object.create(StaticObject.prototype);

module.exports = Ruby;

},{"./staticObject":6}],6:[function(require,module,exports){
'use strict';

// StaticOject
var StaticObject = function(game, x, y, image_name) {
  Phaser.Sprite.call(this, game, x, y, image_name);
  //this.anchor.setTo(1, 1);
  this.game.physics.enable(this, Phaser.Physics.ARCADE);
  this.body.collideWorldBounds = true;
  this.body.overlapX = 1;
  this.body.overlapY = 1;
}

StaticObject.prototype = Object.create(Phaser.Sprite.prototype);
StaticObject.prototype.constructor = StaticObject;

module.exports = StaticObject;

},{}],7:[function(require,module,exports){
'use strict';

// GameOver
function GameOver() {};

GameOver.prototype = {
  preload: function() {

  },

  create: function() {
    var style = { font: 'bold 55px Arial', fill: '#ffff00', align: 'center'};
    this.titleText = this.game.add.text(this.game.world.centerX, 275, 'Game Over', style);
    this.titleText.anchor.setTo(0.5, 0.5);
  },

  update: function() {
    if(this.game.input.activePointer.justPressed()) {
      this.game.state.start('play');
    }
  }
};

module.exports = GameOver;

},{}],8:[function(require,module,exports){
'use strict';

var Ruby = require('../prefabs/ruby');
var Player = require('../prefabs/player');
var Monster = require('../prefabs/monster');

// Play
function Play() {};

Play.prototype = {
  preload: function() {
    this.initKey();
  },

  create: function() {
    this.game.add.sprite(0, 0, 'background');

    this.player = new Player(this.game, 570, 400);
    this.game.add.existing(this.player);

    this.ruby = new Ruby(this.game, 45, 95);
    this.game.add.existing(this.ruby);

    this.monsters = [];
    var m;
    _(4).times(_.bind(function(n){
      m = new Monster(this.game, _.random(10, 450), _.random(10, 450));
      this.monsters.push(m);
      this.game.add.existing(m);
    }, this));
  },

  update: function() {
    _.each(this.monsters, _.bind(function(monster) {
      monster.follow(this.player);
      if(monster.touch(this.player)) {
        this.game.state.start('gameover', false);
      }
    }, this));

    if(this.player.touch(this.ruby)) {
      this.game.state.start('win', false);
    }

    if (this.upKey.isDown) { this.player.moveUp(); }
    if (this.downKey.isDown) { this.player.moveDown(); }
    if (this.leftKey.isDown) { this.player.moveLeft(); }
    if (this.rightKey.isDown) { this.player.moveRight(); }
  },

  render: function() {
    //this.game.debug.bodyInfo(this.player, 16, 24);
    //this.game.debug.spriteInfo(this.player);
    //this.game.debug.body(this.player);
    //this.game.debug.body(this.ruby);
  },

  initKey: function() {
    this.upKey = this.game.input.keyboard.addKey(Phaser.Keyboard.UP);
    this.downKey = this.game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
    this.leftKey = this.game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
    this.rightKey = this.game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
  }
};

module.exports = Play;

},{"../prefabs/monster":3,"../prefabs/player":4,"../prefabs/ruby":5}],9:[function(require,module,exports){
'use strict';

// Preload
function Preload() {}

Preload.prototype = {
  preload: function() {
    this.game.load.image('background', '../images/background.png');
    this.game.load.image('player', 'images/player.png');
    this.game.load.image('ruby', 'images/ruby.png');
    this.game.load.image('ghost1', 'images/ghost1.png');
    this.game.load.image('ghost2', 'images/ghost2.png');
    this.game.load.image('ghost3', 'images/ghost3.png');
    this.game.load.image('dark_knight', 'images/dark_knight.png');
    this.game.load.image('hornet', 'images/hornet.png');
    this.game.load.image('undead', 'images/undead.png');
    this.game.load.image('cactuar', 'images/cactuar.png');
  },

  create: function() {
    this.game.state.start('play');
  },

  update: function() {

  }
};

module.exports = Preload;

},{}],10:[function(require,module,exports){
'use strict';

// Win
function Win() {};

Win.prototype = {
  preload: function() {

  },

  create: function() {
    var style = { font: 'bold 55px Arial', fill: '#ffff00', align: 'center'};
    this.titleText = this.game.add.text(this.game.world.centerX, 275, 'You win !', style);
    this.titleText.anchor.setTo(0.5, 0.5);
  },

  update: function() {
    if(this.game.input.activePointer.justPressed()) {
      this.game.state.start('play');
    }
  }
};

module.exports = Win;

},{}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
